---
openapi: 3.0.1
info:
  title: Seinfeld API V1
  version: v1
paths:
  "/api/v1/quotes":
    get:
      summary: Retrieves all quotes
      parameters:
      - name: token
        in: header
        schema:
          type: string
      responses:
        '200':
          description: quotes retrieved
          content: {}
        '401':
          description: unauthorized
          content: {}
  "/api/v1/quotes/{id}":
    get:
      summary: Gets a single quote
      parameters:
      - name: token
        in: header
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: int
      responses:
        '200':
          description: quote retrieved
          content: {}
        '404':
          description: quote not found
          content: {}
  "/api/v1/search":
    post:
      summary: Search for quotes
      parameters:
      - name: token
        in: header
        schema:
          type: string
      responses:
        '200':
          description: Search successful
          content: {}
        '401':
          description: Unauthorized
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                search:
                  type: object
                  properties:
                    match_text:
                      type: string
                  required:
                  - match_text
              required:
              - search
  "/api/v1/users":
    post:
      summary: Create an api token
      description: |
        Provide an email address to create a user token. You
        may choose your own token if you so desire, but keep
        in mind this is a toy app and everything is passed
        and stored in clear text. Both email and token must
        be unique within the application.
      parameters: []
      responses:
        '201':
          description: User/Token Created
          content: {}
        '422':
          description: Blank email
          content: {}
        '400':
          description: Bad params
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: user
                schema:
                  type: object
                  properties:
                    email:
                      type: string
                    token:
                      type: string
                  required:
                  - email
                require:
                - user
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
- url: https://yada-yada-yada.herokuapp.com
  variables:
    defaultHost:
      default: yada-yada-yada.herokuapp.com
